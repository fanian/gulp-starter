// Breakpoints for responsive
=r($width)
	@media only screen and (max-width: $width+'px')
		@content

// @font-face (.eot, .woff, .ttf)
=font($alias, $name)
	@font-face
		font-family: $alias
		src: url("../fonts/" + $name + ".eot")
		src: url("../fonts/" + $name + ".eot?#iefix") format("embedded-opentype"), url("../fonts/" + $name + ".woff") format("woff"), url("../fonts/" + $name + ".ttf") format("truetype")
		font-weight: normal
		font-style: normal

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
=clr
	&:before,
	&:after
		content: ""
		display: table
	&:after
		clear: both

// CSS image replacement
// Old technique: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
// NEW: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
=hide-text
	text-indent: 100%
	white-space: nowrap
	overflow: hidden
	// font: #{0/0} a
	// color: transparent
	// text-shadow: none
	// background-color: transparent
	// border: 0

=transition($what)
	-moz-transition: $what
	-o-transition: $what
	-webkit-transition: $what
	-ms-transition: $what
	transition: $what

=cover
	background-repeat: no-repeat
	background-size: cover
	background-position: 50% 50%

=retina
	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)
		@content

=rotate($var)
	-ms-transform: rotate($var+deg)
	-webkit-transform: rotate($var+deg)
	transform: rotate($var+deg)

=blur($var)
	-webkit-filter: blur($var)
	filter: blur($var)

=scale($var)
	-ms-transform: scale($var)
	-webkit-transform: scale($var)
	transform: scale($var)

=placeholder
	&:-ms-input-placeholder
		@content
	&:-moz-placeholder
		@content
	&::-moz-placeholder
		@content
	&::-webkit-input-placeholder
		@content
	&::placeholder
		@content

// Text overflow
// Requires inline-block or block for proper styling
=text-overflow
	overflow: hidden
	-ms-text-overflow: ellipsis
	text-overflow: ellipsis
	white-space: nowrap

=justify
	text-align: justify
	font-size: 0
	&:after
		content: ""
		display: inline-block
		width: 100%
		height: 0

=vertical
	text-align: center
	font-size: 0
	&:before
		content: ""
		display: inline-block
		vertical-align: middle
		width: 0
		height: 100%

=nosel
	-webkit-touch-callout: none
	-webkit-user-select: none
	-khtml-user-select: none
	-moz-user-select: none
	-ms-user-select: none
	user-select: none

// Simple CSS3 gradients
=g($color1, $color2)
	+background-image(linear-gradient($color1, $color2))
=gh($color1, $color2)
	+background-image(linear-gradient(left, $color1, $color2))

// Sticky footer mixin for .wrapper
// Source: http://ryanfait.com/sticky-footer/layout.css
=sticky
	min-height: 100%
	height: auto !important
	height: 100%
	// margin: 0 auto -155px
// .footer, .push
// 	height: 155px

// Font smoothing
// :antialiased (better font-rendering on OSX)
=font-smoothing($value: on)
	@if $value == on
		-webkit-font-smoothing: antialiased
		-moz-osx-font-smoothing: grayscale
	@else
		-webkit-font-smoothing: subpixel-antialiased
		-moz-osx-font-smoothing: auto

// Force hardware acceleration in CSS animations
=gpu
	+transform(translate3d(0, 0, 0))
// If animation is still flickering,
// you can use a few CSS properties to fix the problem:
// -webkit-backface-visibility: hidden
// -webkit-perspective: 1000

// Triangle
// e.g.: +arr(500,50, #000, l)
=arrow($width, $height, $bg, $direction)
	width: 0px
	height: 0px
	border-style: solid
	@if $direction == t
		border-width: 0 $width / 2 + px $height + px $width / 2 + px
		border-color: transparent transparent $bg transparent
	@if $direction == r
		border-width: $height / 2 + px 0 $height / 2 + px $width + px
		border-color: transparent transparent transparent $bg
	@if $direction == b
		border-width: $height + px $width / 2 + px 0 $width / 2 + px
		border-color: $bg transparent transparent transparent
	@if $direction == l
		border-width: $height / 2 + px $width + px $height / 2 + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == tl
		border-width: $height + px $width + px 0 0
		border-color: $bg transparent transparent transparent
	@if $direction == tr
		border-width: 0 $width + px $height + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == br
		border-width: 0 0 $height + px $width + px
		border-color: transparent transparent $bg transparent
	@if $direction == bl
		border-width: $width + px 0 0 $height + px
		border-color: transparent transparent transparent $bg
// to make smooth edges
=arrow-smoothting
	-webkit-transform: rotate(0.05deg)
	-moz-transform: scale(1.1)
	-o-transform: rotate(0.05deg)
	transform: rotate(0.05deg)

=gray
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale")
	// Firefox 10+
	filter: gray
	// IE6-9
	-webkit-filter: grayscale(100%)
	// Chrome 19+ & Safari 6+
	filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)"
=gray-half
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='saturate' values='0.5'/></filter></svg>#grayscale")
	// Firefox 10+
	filter: gray alpha(opacity = 50)
	// IE6-9
	-webkit-filter: grayscale(50%)
	// Chrome 19+ & Safari 6+
=gray-zero
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale")
	-webkit-filter: grayscale(0%)

// Fix display: inline-block elements for IE6/7
=ie
	*display: inline
	*zoom: 1


// ---------------------------------------------------------------------------------------------------------------------
// --- Sprites ----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

$icons: sprite-map("icons/*.png", $spacing: 10px)
// $icons-retina: sprite-map("icons-retina/*.png", $spacing: 10px)

=image-size($path)
	width: image-width($path)
	height: image-height($path)

=s($sprite, $map: $icons)
	background: sprite($map, $sprite) no-repeat
	//background-image: inline-image('icons/'+$sprite+'.png','image/png')
	+image-size(sprite-file($map, $sprite))

=sr($sprite)
	background-image: sprite-url($icons)
	background-position: sprite-position($icons, $sprite)
	background-repeat: no-repeat
	// overflow: hidden
	// display: block
	height: image-height(sprite-file($icons, $sprite))
	width: image-width(sprite-file($icons, $sprite))

	@media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx)
		background-image: sprite-url($icons-retina)
		background-size: (image-width(sprite-path($icons-retina)) / 2) (image-height(sprite-path($icons-retina)) / 2)
		background-position: round(nth(sprite-position($icons-retina, $sprite), 1) / 2) round(nth(sprite-position($icons-retina, $sprite), 2) / 2)
		height: image-height(sprite-file($icons-retina, $sprite)) / 2
		width: image-width(sprite-file($icons-retina, $sprite)) / 2

=svg($name, $width, $height)
	background: url("../img/svg/#{$name}.svg") no-repeat 0 0
	//background-image: inline-image('icons/svg/'+$sprite+'.svg','image/svg'); // to switches sprites to base64, elegant
	+background-size(#{$width}px #{$height}px)
	width: #{$width}px
	height: #{$height}px
